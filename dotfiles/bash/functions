function authme {
  ssh $1 'mkdir -p .ssh && touch .ssh/authorized_keys && chmod 0700 .ssh && chmod 0600 .ssh/authorized_keys && cat >> .ssh/authorized_keys' <~/.ssh/id_rsa.pub
}

tab () {
  osascript 2>/dev/null <<EOF
    tell application "System Events"
      tell process "Terminal" to keystroke "t" using command down
  	end
  	tell application "Terminal"
      activate
      do script with command "cd $PWD; $*" in window 1
    end tell
EOF
}

function take() { 
    mkdir -p "$1"
    cd "$1" 
}

function cd() {
    new_directory="$*";
    if [ $# -eq 0 ]; then 
        new_directory=${HOME};
    fi;
    builtin cd "${new_directory}" && [[ -s .nvmrc ]] && nvm use
}

function lsp() {
	echo "$PWD/$(ls $1)"
}

# bak: bakup copy file to *~
# usage: bak <fname>
# example: important.sh -> important.sh.bak
function bak() {
  cp "$1" "$1.bak"
}

function killnamed () { 
    ps ax | grep $1 | grep -x "grep" | cut -d ' ' -f 1 | xargs kill 
}

# Outputs 1 when the given command is found in PATH. Outputs 0 otherwise.
function command_exists {
    which $1 &> /dev/null
    if [[ $? == 0 ]]
    then
      echo 1
    else
      echo 0
    fi
}

# === Git ===

# Commit pending changes and quote all args as message
function gam() { 
    git commit -v -a -m "$*"
}

function gm() { 
    git commit -v -m "$*"
}

function gcm() {
  git checkout master
}

function gpop() {
  git checkout -
}

# get the name of the branch we are on
function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function git_status() {
  if current_git_status=$(git status 2> /dev/null | grep 'added to commit' 2> /dev/null); then
    echo "*"
  fi
}

function loc() {
  find . -name "*$1*"
}

function lang_version() {
  if [[ -f .nvmrc ]]; then
    echo -en "(node $(node --version 2>&1))"
  elif [[ -d .git ]]; then
    echo -en "($(python --version 2>&1))"
  fi
}

# Disable the git prompt method when git does not exist in path;
# this is neccessary on computers without git if you want it to
# have a usable prompt anyway
if [ $(command_exists git) == 0 ]; then
  function get_git_prompt_info() {
    echo ""
  }
  function git_status() { 
    echo ""
  }
fi

# commits svn files matching criteria with message
function svn_commit_it() {
  svn ci -m $2  $(svn st | grep $1 | cut -d" " -f7 - | xargs)
}

function origrm() {
  find . -name "*.orig" -delete
}
